"""A Rock, Paper, Scissors Game with Gemini Commentary"""

import random;
import from mtllm.llms { OpenAI, Gemini }

# Use Gemini as LLM
glob llm = Gemini(model_name="gemini-1.5-flash", verbose=False);

"""Provide a fun message based on the result"""
def rps_commentary(player: str, computer: str, result: str) -> str byllm();

walker RPSGame {
    has str player_move;

    can start with root entry;
    can decide with turn entry;
}

start {
    spawn -> plays turn(player_move=player_move);
    take -> plays;
}

decide {
    if (
        (here.player_move == "rock" and here.computer_move == "scissors") or
        (here.player_move == "paper" and here.computer_move == "rock") or
        (here.player_move == "scissors" and here.computer_move == "paper")
    ) {
        result = "win";
    }
    elif (here.player_move == here.computer_move) {
        result = "tie";
    }
    else {
        result = "lose";
    }

    commentary = rps_commentary(here.player_move, here.computer_move, result);
    // You can use `report commentary;` here if output is desired
}

node turn {
    has str player_move;
    has str computer_move = random.choice(["rock", "paper", "scissors"]);
}

with entry: __main__ {
    root spawn RPSGame(player_move="rock");
    root spawn RPSGame(player_move="paper");
    root spawn RPSGame(player_move="scissors");
}
